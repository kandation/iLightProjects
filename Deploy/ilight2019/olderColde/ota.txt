void ota_setup() {
  const char* ssid = "itim";
  const char* password = "ilovecpe";
  const char* host = "iLight_host";
  Serial.println("Booting");

  Serial.println("Booting");
  WiFi.mode(WIFI_STA);

  WiFi.begin(ssid, password);

  Display display_ota = Display();
  DisplayRender displayRender_ota = DisplayRender(display_ota);
  byte box[] = {6, 9, 10};
  int box_color[] = {255, 120, 255};
  byte box2[] = {5};
  int box2_color[] = {0, 0, 255};
  int ota_counter = 0;
  display_ota.add_pixel(box, box_color, 3);
  display_ota.add_pixel(box2, box2_color, 1);
  displayRender_ota.setDisplay(display_ota);
  displayRender_ota.updateMap();
  pixels.show();
  delay(500);

  while (WiFi.waitForConnectResult() != WL_CONNECTED) {
    WiFi.begin(ssid, password);
    Serial.println("Retrying connection...");
    if (millis() % 3 == 0) {
      display_ota.rotate_left();
    }
    displayRender_ota.setDisplay(display_ota);
    displayRender_ota.updateMap();
    pixels.show();

  }


  /* configure dimmers, and OTA server events */
  ArduinoOTA.setHostname(host);
  ArduinoOTA.onStart([]() {
    Serial.println("Start");
  });

  ArduinoOTA.onEnd([]() {
    Serial.println("\nEnd");
  });

  ArduinoOTA.onProgress([](unsigned int progress, unsigned int total) {
    Serial.printf("Progress: %u%%\r", (progress / (total / 100)));
  });

  ArduinoOTA.onError([](ota_error_t error) {
    //ESP.restart();
    Serial.printf("Error[%u]: ", error);
    if (error == OTA_AUTH_ERROR) Serial.println("Auth Failed");
    else if (error == OTA_BEGIN_ERROR) Serial.println("Begin Failed");
    else if (error == OTA_CONNECT_ERROR) Serial.println("Connect Failed");
    else if (error == OTA_RECEIVE_ERROR) Serial.println("Receive Failed");
    else if (error == OTA_END_ERROR) Serial.println("End Failed");

  });

  /* setup the OTA server */
  ArduinoOTA.begin();
  Serial.println("Ready");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
}